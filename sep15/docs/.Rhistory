as.list(it)
it <- irnorm(1, count=3)
nextElem(it)
i1 <- iter(1:3)
nextElem(i1)
try(nextElem(it))
library(foreach)
x <- foreach(i = 1:3) %do% sqrt(i)
sqrt(3)
x <- foreach(i=1:3) %do% sqrt(i)
x <- foreach(a = 1:3, b = rep(10, 3)) %do% (a + b)
x <- foreach(a = 1:3, b = rep(10, 3)) (a + b)
install.packages(codetools)
x <- foreach(i=1:3) %do% sqrt(i)
library(LearnBayes)
install.packages(LearnBayes)
install.packages("LearnBayes")
library("LearnBayes")
{
q;
}
appetizer.solution <- local (#
function (target) {#
  app <- c(2.15, 2.75, 3.35, 3.55, 4.20, 5.80)#
  r <- 2L#
  repeat {#
	c <- gtools::combinations(length(app), r=r, v=app, repeats.allowed=TRUE)#
	s <- rowSums(c)#
	if ( all(s > target) ) {#
	  print("No solution found")#
	  break#
	}#
	x <- which( abs(s-target) < 1e-4 )#
	if ( length(x) > 0L ) {#
	  print("Solution found")#
	  print(c[x,])#
	  break#
	}#
	r <- r + 1L#
  }#
})#
appetizer.solution(15.05)
install.packages(gtools)
install.package
install.packages
install.packages("gdata")
install.packages("gtools")
appetizer.solution <- local (#
function (target) {#
  app <- c(2.15, 2.75, 3.35, 3.55, 4.20, 5.80)#
  r <- 2L#
  repeat {#
	c <- gtools::combinations(length(app), r=r, v=app, repeats.allowed=TRUE)#
	s <- rowSums(c)#
	if ( all(s > target) ) {#
	  print("No solution found")#
	  break#
	}#
	x <- which( abs(s-target) < 1e-4 )#
	if ( length(x) > 0L ) {#
	  print("Solution found")#
	  print(c[x,])#
	  break#
	}#
	r <- r + 1L#
  }#
})#
appetizer.solution(15.05)
gtools::combinations(length(app),r=r, v=app, repeats.allowed=TRUE)
app
app <- c(2.15, 2.75, 3.35, 3.55, 4.20, 5.80)
r <- 2L
gtools::combinations(length(app), r=r, v=app, repeats.allowed=TRUE)
rowSums(c)
c <- gtools::combinations(length(app), r=r, v=app, repeats.allowed=TRUE)
rowSums(c)
r + 1L
gtools::combinations(length(app), r=3, v=app, repeats.allowed=TRUE)
combinations(3,2,letters[1:3])
gtools::combinations(3,2,letters[1:3])
8
gtools::combinations(3,2,letters[1:8])
gtools::combinations(8,4,letters[1:8])
gtools::combinations(5,3,letters[1:5])
gtools::permutations(5,3,letters[1:5])
ls()
integrand <- function(x) {1/((x+1)*sqrt(x))}
integrand
integrand(3)
integrate(integrand, lower = 0, upper = Inf)
integrate(integrand, lower = 0, upper = 10)
?apply
?lapply
q()
map <- new.env(hash=TRUE)
assign('dog',7,map)
ls(map)
x <- 'dog'
x
ls(map)
get(x,map)
map
counts < - c(18,17,15,20,10,20,25,13,12)
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
glm.D93 <- glm(counts ~ outcome +treatment, family=poisson())
glm.D93
model <- unclass(glm.D93)
model
glm.D93.summary()
summary(glm.D93)
seq(-0.5,8.5,1)
load("/Users/yutakashino/sandbox/mcmcworks/kubo2009/d.RData")
print(d)
install.library(epitools)
install.packages(epitools)
install.packages("epitools")
q()
library("robustbase")
data(table.b13,package="MPV")
Jet <- table.b13
lr <- lmrob(y~x3, data=Jet)
summary(lr)
x3
Jet
plot(y~x3,data=Jet)
abline(lmrob(y~x3,data=jet))
abline(lmrob(y~x3,data=Jet))
ls()
rm(list = ls(all = TRUE))
ls()
rm(ls())
rm(list=ls())
ls()
q()
demo()
demo(image)
install.packages("RCurl")
library(RCurl)#
# example from the vignette:#
x = postForm('http://www.wormbase.org/db/searches/advanced/dumper', #
  species="briggsae", #
  list="", #
  flank3="0", #
  flank5="0", #
  feature="Gene Models", #
  dump = "Plain TEXT", #
  orientation = "Relative to feature", #
  relative = "Chromsome", #
  DNA ="flanking sequences only", #
  .cgifields =c("feature", "orientation", "DNA", "dump", "relative"))
x
library(ggplot2)
library(HSAU2)
install.packages("HSAU2")
library(HSAUR2)
library(XML)
download.file("http://euler.bakfoo.com/jleagers.rda", "jleagers.rda")
download.file("http://euler.bakfoo.com/public/jleagers.rda", "jleagers.rda")
load("jleagers.rda")
ls
ls()
data.jleagers
getwd()
conn <- url("http://euler.bakfoo.com/public/jleagers.rda")
load(conn)
ls()
data.jleagers
conn <- url("http://euler.bakfoo.com/public/japanpop.rda")#
load(conn)
ls()
x <- co2#
y <- fft(x)#
y[20:(length(y)-19)] <- 0#
y <- Re(fft(y, inverse=T)/length(y))#
plot(x, type='l')#
lines(y, col='red', lwd=3)
spectrum(co2)#
abline(v=1:10, lty=3)
signal.and.spectrum <- function (x, main="") {#
  op <- par(mfrow=c(2,1), #
            mar=c(2,4,2,2)+.1,#
            oma=c(0,0,2,0))#
  plot(x, type="l", main="", ylab="Signal")#
  spectrum(x, main="", xlab="")#
  abline(v=.1*1:10, lty=3)#
  par(op)#
 mtext(main, line=1.5, font=2, cex=1.2)#
}#
N <- 100#
x <- 10 * (1:N / N)#
signal.and.spectrum(sin(2*pi*x), #
                    "Sine wave, period=10")
signal.and.spectrum(x - floor(x), #
                    "sawtooth, period=10")
data(sunspots)#
plot(sunspots)
a <- locator() # click on the local maxima#
b <- a$x - a$x[1]#
bb <- outer(b, 9:13, '/')#
apply(abs(bb - round(bb)), 2, mean)
n <- 1000#
x <- cumsum(rnorm(n))+rnorm(n)#
y <- fft(x)#
y[20:(length(y)-19)] <- 0#
y <- Re(fft(y, inverse=T)/length(y))#
op <- par(mfrow=c(3,1), mar=c(3,4,2,2)+.1)#
plot(x, type='l', #
     main="FFT: Removing the high frequencies from a signal")#
lines(y, col='red', lwd=3)#
plot(Mod(fft(x)[1: ceiling((length(x)+1)/2) ]), #
     type='l', ylab="FFT")#
plot(Mod(fft(y)[1: ceiling((length(y)+1)/2) ]), #
     type='l', ylab="Truncated FFT")#
par(op)
colorie <- function (x, y1, y2, N=1000, ...) {#
  for (t in (0:N)/N) {#
    lines(x, t*y1+(1-t)*y2, ...)#
  }#
}#
# No, there is already a function to do this#
colorie <- function (x, y1, y2, ...) {#
  polygon( c(x, x[length(x):1]), c(y1, y2[length(y2):1]), ... )#
}#
x <- seq(-6,6, length=100)#
y <- dnorm(x)#
plot(y~x, type='l')#
i = x<qnorm(.025)#
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')#
i = x>qnorm(.975)#
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')#
lines(y~x)#
title(main="Type I error")
plot(y~x, type='l')
i = x<qnorm(.025)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
colorie <- function (x, y1, y2, ...) {#
  polygon( c(x, x[length(x):1]), c(y1, y2[length(y2):1]), ... )#
}
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
i = x>qnorm(.975)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
line(y-x)
lines(y-x)
curve(dchisq(x,3), from =0, to=100, add=T, col=col[3])
curve(dchisq(x,3), from=0,to=10,col="red")
n <- 15#
col <- rainbow(n)#
for (i in 1:n){#
    curve(dchisq(x,i), from=0, to=100, add=T, col=col[i])#
}
old <- par(new=TRUE) #
n <- 15#
col <- rainbow(n)#
for (i in 1:n){#
    curve(dchisq(x,i), from=0, to=100, add=TRUE, col=col[i])#
}#
par(old)
install.packages("Rcpp")
install.packages("inline")
f <- function(n, x=1) for (i in 1:n) x=1/(1+x)#
g <- function(n, x=1) for (i in 1:n) x=(1/(1+x))#
h <- function(n, x=1) for (i in 1:n) x=(1+x)^(-1)#
j <- function(n, x=1) for (i in 1:n) x={1/{1+x}}#
k <- function(n, x=1) for (i in 1:n) x=1/{1+x}
library(Rcpp)#
library(inline)
l <- cxxfunction(signature(ns="integer", xs="numeric"),#
                 'int n = as<int>(ns); double x=as<double>(xs);#
                  for (int i=0; i<n; i++) x=1/(1+x);#
                  return wrap(x); ',#
                 plugin="Rcpp")
library(rbenchmark)
install.packages("rbenchmark")
library(rbenchmark)
N <- 1e6#
benchmark(f(N, 1), g(N, 1), h(N, 1), j(N, 1), k(N, 1), l(N, 1),#
          columns=c("test", "replications", "elapsed", "relative"),#
          order="relative", replications=10)
sumo <- data.frame(x=[1:15])
c(1:15)
sumo <- data.frame(x=c(0:15), win=c(0, 0, 6, 13, 24, 38, 53, 37, 102, 54, 10, 17, 17, 7, 5, 3))
sumo
barplot(sumo)
library(ggplot2)
ggplot(sumo, aes(x = x, y = win)) + geom_bar()
head(mtcars)
head(movies)
ggplot(sumo, aes(x = x, y = win)) + geom_line
ggplot(sumo, aes(x = x, y = win)) + geom_line()
g <- ggplot(sumo, aes(x = x, y = win)) + geom_line()
g <- ggplot(sumo, aes(x = x, y = win)) + geom_path(aes(colour = "observation"))
dsumo <- function(x) dbinom(x, size=sum(sumo$win), prob=1/2)
dsumo(3)
dsumo(19)
sum(sumo$win)
length(sumo$x)
dsumo <- function(x) dbinom(x, size=length(sumo$x), prob=1/2)
dsumo(3)
dsumo <- function(x) sum(sumo$win)*dbinom(x, size=length(sumo$x), prob=1/2)
dsumo(3)
g+ stat_function(fun=dsumo, colour="theory") + scale_colour_manual( values = c("observation" = "orange", "theory" = "blue"))
g+ stat_function(fun=dsumo, aes(colour="theory")) + scale_colour_manual( values = c("observation" = "orange", "theory" = "blue"))
dsumo(3)
dsumo(8)
dsumo(3.3)
g
theory <- data.frame(x=c(1:15), win=dsumo(x))
theory <- data.frame(x=c(1:15), win=dsumo(c(1:15)))
theory
g + geom_path(theory, aes(x = x, y = win, colour="theory")) + scale_colour_manual(values = c("observation" = "orange", "theory" = "blue"))
g + geom_line(theory, aes(x = x, y = win, colour="theory")) + scale_colour_manual(values = c("observation" = "orange", "theory" = "blue"))
g
qplot(theory, aes(x=x, y=win))
theory
qplot(x, win, data=theory)
qplot(x, win, data=theory) + geom_soomth()
qplot(x, win, data=theory) + geom_smooth()
qplot(x, win, data=theory, geom="line")
g + qplot(x, win, data=theory, geom="line")
qplot(x, win, data=theory, geom="line") + geom_path(sumo, aes(x = x, y = win, colour="red"))
sumo1 <- data.frame(x = sumo$x, obswin = sumo$win, thewin = theory$win)
c(0:15)
sumo1 <- data.frame(x = sumo$x, obswin = sumo$win, thewin = dsmo(c(0:15)))
sumo1 <- data.frame(x = sumo$x, obswin = sumo$win, thewin = dsumo(c(0:15)))
sumo1
melt(sumo1, id=('x'))
ggplot(data=melt(sumo1, id('x'), aes(x=x, y=value, colour=variable)) + geom_path()
;
ggplot(data=melt(sumo1, id('x')), aes(x=x, y=value, colour=variable)) + geom_path()
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path()
sumo <- data.frame(x=c(0:15), win=c(0, 0, 6, 13, 24, 38, 53, 37, 102, 54, 10, 17, 17, 7, 5, 3))
sumo
dsumo <- function(x) sum(sumo$win)*dbinom(x, size=length(sumo$x), prob=1/2)
sumo1 <- data.frame(x = sumo$x, obswin = sumo$win, thewin = dsumo(c(0:15)))
sumo1
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path()
library(ggplot2)
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path(
;
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path()
f <- function(n, x=1) for (i in 1:n) x=1/(1+x)
k <- function(n, x=1) for (i in 1:n) x=1/{1+x}
library(rbenchmark)
N <- 1e4
benchmark(f(N,1), k(N,1))
g <- function(n, x=1) for (i in 1:n) x=(1/(1+x))
benchmark(f(N,1), k(N,1), g(N,1))
library(Rcpp)#
library(inline)
cpp <- cxxfunction( signature( ns="integer", xs="numeric"),#
    '#
    int n = as<int>(ns); #
    double x = as<double>(xs); #
    for (int i = 0; i < n; i++) x = 1/(1+x); #
    return wrap(x); #
    ', plugin = "Rcpp" )
benchmark(f(N,1), k(N,1), cpp(N,1))
N <- 1e6
benchmark(f(N,1), k(N,1), cpp(N,1))
sumo <- data.frame(x=c(0:15), win=c(0, 0, 6, 13, 24, 38, 53, 37, 102, 54, 10, 17, 17, 7, 5, 3))#
dsumo <- function(x) sum(sumo$win)*dbinom(x, size=length(sumo$x), prob=1/2)#
sumo1 <- data.frame(x = sumo$x, obswin = sumo$win, thewin = dsumo(c(0:15)))#
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path()#
gsave("sumoanom.png")
getwd()
setwd("Dropbox/sandboxDrop/@IT/sandbox/sep15/docs/")
getwd()
library(ggplot2)#
sumo <- data.frame(x=c(0:15), win=c(0, 0, 6, 13, 24, 38, 53, 37, 102, 54, 10, 17, 17, 7, 5, 3))#
dsumo <- function(x) sum(sumo$win)*dbinom(x, size=length(sumo$x), prob=1/2)#
sumo1 <- data.frame(x = sumo$x, obswin = sumo$win, thewin = dsumo(c(0:15)))#
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path()#
gsave("sumoanom.png")
ggsave("sumoanom.png")
library(ggplot2)#
sumo <- data.frame(x=c(0:15), win=c(0, 0, 6, 13, 24, 38, 53, 37, 102, 54, 10, 17, 17, 7, 5, 3))#
dsumo <- function(x) sum(sumo$win)*dbinom(x, size=length(sumo$x), prob=1/2)#
sumo1 <- data.frame(x = sumo$x, win_obs = sumo$win, win_theory = dsumo(c(0:15)))#
ggplot(data=melt(sumo1, id='x'), aes(x=x, y=value, colour=variable)) + geom_path()#
ggsave("sumoanom.png")
install.pacakages("fields")
install.pacakage("fields")
install.packages("fields")
install.packages("sp")
install.packages("maptools")
  library(fields)    # needed for image.plot()#
  library(sp)        # needed for coordinates, SpatialPointsDataFrame#
  library(maptools)  # neeed for wrld_simpl map#
#
# Get world shape for map background#
  data(wrld_simpl)            ## from maptools package#
  shp <- wrld_simpl#
#
# Read source data file#
 # link to NASA gistemps map page: http://data.giss.nasa.gov/gistemp/maps/#
 link <- "http://processtrends.com/Files/global_2x2_lota_data_latest.csv"#
#
which_mo <- "July, 2010" #
 rdf <- read.table(link, skip = 1, sep = ",", header=T)#
 names(rdf) <- c("i", "j", "lon", "lat", "anom")#
#
################################
# Convert all anom data with 9999.0000 to NA#
  rdf$anom[rdf$anom==9999.0000] <- NA         # convert all 9999.0000 to NA#
#
## Promote to SpatialPointsDataFrame#
  points_df <- rdf          # make copy of original file#
  coordinates(points_df) = c("lon", "lat")     # convert to sp file with lon/lat cordinates#
#
## Promote to SpatialPixelsDataFrame#
  pixel_df <- points_df#
  gridded(pixel_df) <- TRUE#
#
## Promote to SpatialGridDataFrame#
  rdf_sp = as(pixel_df, "SpatialGridDataFrame")#
#
 main_title <- paste("GISS Temp Anomaly ", which_mo, sep="")#
 #
## image_func()  Plot Function#
  image_func <- function() {#
    par(mar=c(2.5,2,1,1)) ; par(oma=c(0,0,0,0))  # set plot par(mar=)#
    par(pty="s") #square#
    leg_title <- expression(paste("Anomaly - ",degree*C, " (Baseline: 1951-1980)", sep=""))#
    g_plot <- as.image.SpatialGridDataFrame(rdf_sp["anom"])#
    image.plot(g_plot, main=main_title, nlevel=12,las=1,#
      axes=T, horizontal=T,  ylim=c(-90,90), xlim=c(-181,180), zlim = c(-6,6),#
      legend.lab = leg_title, legend.mar=4,legend.shrink=0.5)#
   plot(shp, border="black", add=T)#
   #grid(col = "lightgrey", lty=1)    # optional grid on/off?#
  }#
  #
## Plot image on printer#
  image_func()
 main_title <- paste("GISS Temp Anomaly ", which_mo, sep="")#
 #
 par(mar=c(2.5,2,1,1)) ; par(oma=c(0,0,0,0))  # set plot par(mar=)#
 par(pty="s") #square#
 leg_title <- expression(paste("Anomaly - ",degree*C, " (Baseline: 1951-1980)", sep=""))#
 g_plot <- as.image.SpatialGridDataFrame(rdf_sp["anom"])#
 image.plot(g_plot, main=main_title, nlevel=12,las=1,#
      axes=T, horizontal=T,  ylim=c(-90,90), xlim=c(-181,180), zlim = c(-6,6),#
      legend.lab = leg_title, legend.mar=4,legend.shrink=0.5)#
 plot(shp, border="black", add=T)#
 grid(col = "lightgrey", lty=1)    # optional grid on/off?
png("globaltempanorm.png")
getwd()
dev.off()
g_plot <- as.image.SpatialGridDataFrame(rdf_sp["anom"])#
image.plot(g_plot, main=main_title, nlevel=12,las=1,#
    axes=T, horizontal=T,  ylim=c(-90,90), xlim=c(-181,180), zlim = c(-6,6),#
    legend.lab = leg_title, legend.mar=4,legend.shrink=0.5)#
plot(shp, border="black", add=T)#
grid(col = "lightgrey", lty=1)    # optional grid on/off?#
png("globaltempanorm.png")#
dev.off()
png("globaltempanorm.png")#
par(mar=c(2.5,2,1,1)) ; par(oma=c(0,0,0,0))  # set plot par(mar=)#
par(pty="s") #square#
leg_title <- expression(paste("Anomaly - ",degree*C, " (Baseline: 1951-1980)", sep=""))#
g_plot <- as.image.SpatialGridDataFrame(rdf_sp["anom"])#
image.plot(g_plot, main=main_title, nlevel=12,las=1,#
    axes=T, horizontal=T,  ylim=c(-90,90), xlim=c(-181,180), zlim = c(-6,6),#
    legend.lab = leg_title, legend.mar=4,legend.shrink=0.5)#
plot(shp, border="black", add=T)#
grid(col = "lightgrey", lty=1)    # optional grid on/off?#
dev.off()
png("globaltempanorm.png", widt=8, height=4, units="in", res=72)#
par(mar=c(2.5,2,1,1)) ; par(oma=c(0,0,0,0))  # set plot par(mar=)#
par(pty="s") #square#
leg_title <- expression(paste("Anomaly - ",degree*C, " (Baseline: 1951-1980)", sep=""))#
g_plot <- as.image.SpatialGridDataFrame(rdf_sp["anom"])#
image.plot(g_plot, main=main_title, nlevel=12,las=1,#
    axes=T, horizontal=T,  ylim=c(-90,90), xlim=c(-181,180), zlim = c(-6,6),#
    legend.lab = leg_title, legend.mar=4,legend.shrink=0.5)#
plot(shp, border="black", add=T)#
grid(col = "lightgrey", lty=1)    # optional grid on/off?#
dev.off()
png("globaltempanorm.png", widt=8, height=5, units="in", res=72)#
par(mar=c(2.5,2,1,1)) ; par(oma=c(0,0,0,0))  # set plot par(mar=)#
par(pty="s") #square#
leg_title <- expression(paste("Anomaly - ",degree*C, " (Baseline: 1951-1980)", sep=""))#
g_plot <- as.image.SpatialGridDataFrame(rdf_sp["anom"])#
image.plot(g_plot, main=main_title, nlevel=12,las=1,#
    axes=T, horizontal=T,  ylim=c(-90,90), xlim=c(-181,180), zlim = c(-6,6),#
    legend.lab = leg_title, legend.mar=4,legend.shrink=0.5)#
plot(shp, border="black", add=T)#
grid(col = "lightgrey", lty=1)    # optional grid on/off?#
dev.off()
library(hsaur)
library(HSAUR)
clouds
c("日馬富士", ”把瑠都", )
c("日馬富士", ”把瑠都", "琴光喜")
defaults write org.R-project.R force.LANG ja_JP.UTF-8
