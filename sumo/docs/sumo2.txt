>>>filepath:/fcoding/articles/<<<
>>>rensai_name:statbushknife<<<
>>>rensai_number:09<<<
>>>date:2011/02/08<<<
>>>title:第8回 大相撲のアノーマリー (2)<<<
>>>abs
（編集部）<<<

●今回の前口上

連載ものの途中なのにまた少し時間があいてしまいました。申し訳ございません。ただそのお陰というわけでもありませんが、偶然に大相撲の八百長事件が世間を賑わすという、この連載にとってはタイムリーな状況になりました。そこで、今回は過去12年のデータから八百長のような行為がデータで確かめられるかどうかということに内容をフォーカスしたいと思います。当初の予定だった、Yahoo!スポーツの大相撲データを自動採取して、Google Refineで自動整形させるというネタについては、次回以降に回したいと思います。

●大相撲八百長問題

2010年の5月20日に週刊新潮において当時の大関琴光喜が暴力団を胴元にしたプロ野球賭博に関与していたと報道されたのがきっかけで、何人もの力士や親方、関係者が野球賭博事件で解雇や除名、謹慎などの処分を受けました。その後警察の捜査が入り賭博や恐喝に関する捜査が行われました。

http://ja.wikipedia.org/wiki/%E5%A4%A7%E7%9B%B8%E6%92%B2%E9%87%8E%E7%90%83%E8%B3%AD%E5%8D%9A%E5%95%8F%E9%A1%8C

その野球賭博事件の捜査の過程で、賭博に関与した力士の携帯電話のメール記録が調べられたのです。その結果、十両の力士が所有していた携帯電話のメールの内容に、勝ち負けの売買や具体的な戦い方のシナリオが記さていることを警察が見つけました。相当長期間に渡って大相撲では八百長疑惑が取り上げられていましたが、今回初めてその疑惑を裏付ける始めての物証が得られたというわけです。

http://ja.wikipedia.org/wiki/%E5%A4%A7%E7%9B%B8%E6%92%B2%E5%85%AB%E7%99%BE%E9%95%B7%E5%95%8F%E9%A1%8C

これはまさに大相撲の存在理由を揺るがす事態であり、大相撲という業界全体の存亡の危機に立たされているのが現状です。

●オープンデータによる大相撲八百長問題の解析

さて、大相撲の八百長があることを統計分析で示唆したMark Duggan と Steven D. Levittの論文(Duggan&Levitt2002)について前回取り上げました。この論文は、1989年から2000年までの十両以上の取組データに基づいていますが、前回の連載では1999年1月から2010年9月までの幕内力士のデータを利用しました。もう少し具体的に言いますと、Yahoo!スポーツ(http://sports.yahoo.co.jp/sumo/etc/torikumi/199901/>>>link:http://sports.yahoo.co.jp/sumo/etc/torikumi/199901/<<<)にある大相撲の幕内力士の取り組み結果をスクレイピングし、Google Refineで整形してから、1999年1月から2010年9月までの場所とごとの勝ち星についてプロットし、ランダムネスを仮定した場合の二項分布と比較しました。その結果、負け越しか勝ち越しを決める7勝/8勝のところで二項分布からずれているということを見出しました。

>>>img: sumoanorm.png<<<

ランダムを仮定すると7勝も8勝も同じだけカウントされていなければならないのに、図では7勝が小さくなっているということです。この図を出力すRのコードは再掲すると以下のとおりになります。プロットにggplot2を利用しました。

>>>code
df <- read.csv("http://spreadsheets.google.com/pub?key=0AlBuJgqcP5f3dElpb0lWcDRjZldkMzE1LW5aY1VtMHc&hl=en&single=true&gid=0&output=csv", header=FALSE)
names(df) <- c("rikishi", "vs", "win", "year", "month")
nrow(df)
df <- subset(df, df$win!=-100 & df$win!=-1)
library(plyr)
df <- ddply(df, .(rikishi, year, month), summarize, numwin=sum(win))

library(ggplot2)
p2 <- ggplot(df, aes(numwin)) + geom_histogram(aes(y = ..count..))
ggsave(plot = p2, filename = "sumoobservation.png")

dsumo <- function(x, total) total*dbinom(x, size = 15, prob = 1/2)
dft<- data.frame(x = c(0:15), win_theory = dsumo(c(0:15), nrow(df)))
df2 <- as.data.frame(table(df$numwin))
names(df2) <- c("x", "win_observ")
str(df2)
df2 <- transform(df2, x = as.integer(x)-1, win_theory = dft$win_theory)
ggplot(data = melt(df2, id = 'x'), aes(x = x, y = value, colour = variable)) + geom_line()
ggplot(data = df2, aes(x)) + geom_point(aes(y = win_observ, colour = "win_observ")) + geom_line(aes(y = win_observ, colour = "win_observ")) + geom_line(aes(y = win_theory, colour = "win_theory"))
<<<

今回はその続きです。それでは、7勝/8勝のあたりがランダムな事象からずれているというのはわかりましたが、これが意図的に仕組まれたものかどうか、というのが気になります。つまり八百長の可能性です。以下はDuggan&Levitt2002の解析手法に準拠しながら、最新の幕内力士のデータでそれを確かめていきます。

●バブル上にいる力士

まず、Duggan&Levittでは、その八百長判定にどういう解析を用いているかということを簡単に説明します。Duggan&Levitt2002では最初に「バブル上の力士」という概念を導入します。大相撲では1場所あたり15回の取組があるのですが、先に8勝するとその力士は勝ち越ししたということで、番付が上がる可能性が大きくなります。番付が上がると待遇や評判の上がるので、なにより力士は場所ごとに8勝することを目指すインセンティブを持っていることは明白です。ここから8勝に至らないギリギリの状態にいる力士を「バブル上の力士」とします。つまり、15日目の取組を迎えるときに7つの勝星を持っている力士は「バブル上の力士」です。同様に14日目の取組を迎えるときに、7勝の力士も6勝の力士も「バブル上の力士」です。14日目で6勝の力士はこの日に勝って、再び15日目で勝たなければ勝ち越せないということです。このバブル上の力士かどうかという判定基準を表にまとめておきました。

>>>img: sumobubble.png<<<

この判定記述でバブル上の力士を全データについて探し出します。具体的な例を提示しましょう。1999年1月場所の千秋楽で武蔵丸は貴乃花と対戦しますが、このときは前日までに7勝だったので、この状態の武蔵丸はバブル上の力士であるといえます。

   rikishi       vs win year month day bubcand bub
46  武蔵丸     栃東   0 1999     1   1       0   0
47  武蔵丸   貴闘力   1 1999     1   2       0   0
48  武蔵丸 土佐ノ海   1 1999     1   3       0   0
49  武蔵丸 安芸乃島   1 1999     1   4       0   0
50  武蔵丸     魁皇   0 1999     1   5       0   0
51  武蔵丸   玉春日   0 1999     1   6       0   0
52  武蔵丸     琴錦   0 1999     1   7       0   0
53  武蔵丸   蒼樹山   1 1999     1   8       0   0
54  武蔵丸   琴乃若   0 1999     1   9       1   0
55  武蔵丸   湊富士   1 1999     1  10       1   0
56  武蔵丸 千代大海   0 1999     1  11       1   1
57  武蔵丸   時津海   1 1999     1  12       1   1
58  武蔵丸   貴ノ浪   1 1999     1  13       1   0
59  武蔵丸   若乃花   0 1999     1  14       1   1
60  武蔵丸   貴乃花   1 1999     1  15       1   1

さて、全ての取組について上記のバブル判定基準に基づきましてバブル上の力士を判定します。その後に、その力士と対戦する相手の力士がバブルかバブルでないかによる判断を加味しなければなりません。その理由は、もし双方の力士がバブル上にあるならば、どちらも勝ち越しを目指して勝負をすることが考えられ、八百長がおきる可能性が低いと判断し、どちらの力士もバブル上にいないとしなければならないからです。その反対に、バブル上の力士の対戦相手がバブル上にない、つまりまだ負けに余裕があるときや勝ち越しているときは、対戦相手が自分の星を売買の対象とするインセンティブが働くことが考えられますので、この対戦はバブル上にあるとします。

バブルの判定ができたあとは、バブル上の力士が勝ちやすいかどうかを統計学的に確かめます。これには次のようにします。まず、バブルとバブルでない者どうしの対戦には、それぞれ1と-1という数値を割り振ります。バブル同士の対戦、バブルでない者同士の対戦には、双方に0という数値を割り当てます。一方、バブル・バブルでないに関わらず力士が勝つ場合は1、敗ける場合には0という数値を割り当てます。このようにすると全ての場所の全ての取組でバブルフラグが-1, 0, 1、勝ちフラグが1, 0と割あたったことになります。これを図示しますと、以下のとおりです。

>>>img: sumoreggraph.png<<<

図の横軸はバブルフラグ、縦軸は勝ちフラグで、可能性のある点にはAからFまでの六つのアルファベットをふっています。バブル同士の対戦、バブルでない同士の対戦はF点またはC点にランダムに分布します。バブルの力士とバブルでない力士の対戦はA-DのペアかB-Eのペアに分かれるはずです。この場合のバブルフラグは必ず片方が1なら片方は必ず-1でありますし、引き分け・休場は解析データから排除しますので、勝ち負けが明らかだからです。この状況で、もしもバブル上力士が勝ちやすいならば、B-Eに点が集まりやすいということです。そのことは、FまたはCの点がランダムに分布すると仮定しても、B-Eに点があるまりやすいならば全体として正の相関がでると予想できます。したがって、勝ちフラグとバブルフラグの線形回帰をすれば、バブルの力士が勝ちやすいかどうかということが統計学的に確かめることができます。

●バブル上の力士は勝ちやすいか？

このようにバブル判定をして、勝ちフラグとバブルフラグで線形回帰したソースコードを以下に置きました。今回は比較的煩雑な処理が多いので、ここではソースコードは提示せずに、ソースコードをダウンロードするようにします。

http://euler.bakfoo.com/public/sumoregression.R

ダウンロードしたソースコードを実行するには、ソースコードを保存したフォルダに移動して、Rを立ち上げ、以下のコマンドを実行します。実行には、取組データをインターネットから落とすためにネットに接続した環境が必要です。また、筆者のiMac(3.06Ghz Core 2Duo)で実行すると7分から8分ほどかかります。

> source("sumoregression.R")

このソースコードで実装したロジックは次のとおりです。幕内71場所の対戦データに、>>>>em:bub<<<<という変数をつくり、初期状態は0を設定しておきます。そして、すべての対戦ごとにバブルの判定を行い、対戦する力士のうち片方だけがバブルにある力士のbub変数に1を入れ、その対戦相手の>>>>em:bub<<<<変数に-1を入れます。対戦者両者がバブルにある場合は、どちらの>>>>em:bub<<<<変数も0のままにします。今回のコードでは>>>>em:df1<<<<というデータフレームに>>>>em:bub<<<<変数をつくりました。また、幕内力士のうち、前頭の下の方の力士は十両の力士と対戦します。これについてYahoo!スポーツや他のサイトにデータを見つけることができませんでしたが、幕内力士の勝敗データの鏡像イメージとして、ある程度再現することができます。そのときの問題は、十両力士がバブル上にあるかどうかが分からないということですが、ここではより計算結果をアノーマリーにシフトさせるように、幕内力士と対戦する十両力士は全員バブル上にないと仮定します。こうして計算した結果を再びデータフレーム>>>>em:df1<<<<とします。バブルフラグを計算した>>>>em:df1<<<は以下のようになります。

> head(df1)
  rikishi       vs win year month day bubcand bub
1  貴乃花     琴錦   0 1999     1   1       0   0
2  貴乃花 土佐ノ海   0 1999     1   2       0   0
3  貴乃花     魁皇   1 1999     1   3       0   0
4  貴乃花   玉春日   0 1999     1   4       0   0
5  貴乃花   蒼樹山   1 1999     1   5       0   0
6  貴乃花   湊富士   1 1999     1   6       0   0

ちなみに、>>>>em:bubcand<<<<変数は>>>>em:bub<<<<を計算するための一時変数で、>>>>em:day<<<<変数は取組日です。

さて、バブル上の力士が勝ちやすいかどうかを統計学的に確かめるには、勝ちフラグとバブルフラグで線形回帰をし、その回帰係数が有意に正であることを確認する、というのがDuggan&Levitt2002の中心ロジックでした。ここではwin変数とbub変数について線形回帰します。それでは、Rで取組日ごとに、線形回帰を計算してみます。取組日ごとに線形回帰をするために、>>>>em:plyr<<<<ライブラリの>>>>em:dlply<<<<を利用しました。実行結果は次のとおりです。

>>>shell
> lmf <- function(d) summary(lm(win ~ bub, d))
> dlply(df1, .(day), lmf)

...
$`11`

Call:
lm(formula = win ~ bub, data = d)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.5190 -0.5022  0.4810  0.4978  0.5146 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept)  0.502204   0.009505  52.835   <2e-16 ***
bub         >>>>em:-0.016821<<<<   0.016208  -1.038    >>>>em:0.299<<<<    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

Residual standard error: 0.5001 on 2766 degrees of freedom
Multiple R-squared: >>>>em:0.0003892<<<<,	Adjusted R-squared: 2.785e-05 
F-statistic: 1.077 on 1 and 2766 DF,  p-value: 0.2994 


$`12`

Call:
lm(formula = win ~ bub, data = d)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.4969 -0.4960 -0.4951  0.5040  0.5049 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  0.4960006  0.0095378  52.004   <2e-16 ***
bub         >>>>em:-0.0008841<<<<  0.0149320  -0.059    >>>>em:0.953<<<<    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

Residual standard error: 0.5002 on 2748 degrees of freedom
Multiple R-squared: >>>>em:1.276e-06<<<<,	Adjusted R-squared: -0.0003626 
F-statistic: 0.003506 on 1 and 2748 DF,  p-value: 0.9528 


$`13`

Call:
lm(formula = win ~ bub, data = d)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.5177 -0.4985 -0.4794  0.5015  0.5206 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.498514   0.009616  51.842   <2e-16 ***
bub         >>>>em:0.019146<<<<   0.014921   1.283    >>>>em:0.200<<<<    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

Residual standard error: 0.5 on 2702 degrees of freedom
Multiple R-squared: >>>>em:0.000609<<<<,	Adjusted R-squared: 0.0002391 
F-statistic: 1.647 on 1 and 2702 DF,  p-value: 0.1995 


$`14`

Call:
lm(formula = win ~ bub, data = d)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.5746 -0.5038  0.4254  0.4962  0.5669 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.503826   0.009609  52.435  < 2e-16 ***
bub         >>>>em:0.070778<<<<   0.015201   4.656 >>>>em:3.38e-06 ***<<<<
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

Residual standard error: 0.4982 on 2686 degrees of freedom
Multiple R-squared: >>>>em:0.008007<<<<,	Adjusted R-squared: 0.007637 
F-statistic: 21.68 on 1 and 2686 DF,  p-value: 3.379e-06 


$`15`

Call:
lm(formula = win ~ bub, data = d)

Residuals:
    Min      1Q  Median      3Q     Max 
-0.6405 -0.4949 -0.3493  0.5051  0.6507 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.494893   0.009604  51.530  < 2e-16 ***
bub         >>>>em:0.145585<<<<   0.019429   7.493  >>>>em:9.1e-14 ***<<<<
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

Residual standard error: 0.495 on 2654 degrees of freedom
Multiple R-squared: >>>>em:0.02072<<<<,	Adjusted R-squared: 0.02035 
F-statistic: 56.15 on 1 and 2654 DF,  p-value: 9.094e-14 
<<<

この線形回帰の結果をみますと、11日目、12日目、13日目の回帰係数に統計的にな有意性を見出すことができません。14日目と千秋楽の回帰係数は統計的に有意な>>>>em:0.070778<<<<と、>>>>em:0.145585<<<<という結果を得ますが、値が小さい上に、R二乗値も>>>>em:0.008<<<<と>>>>em:0.02<<<<という大きくない値です。

この回帰の元になったデータをビジュアル的に示すと次ようになります。

>>>shell
> ggplot(df1, aes(bub, win, color=factor(year))) + facet_wrap(~day) + geom_jitter()
<<<

>>>img:sumoregPlot.jpg<<<

図は15枚のファセットグラフで出来ています。それぞれのファセットは取組日を表しています。横軸が>>>em:bub<<<変数、縦軸が>>>em:win<<<変数です。色は場所の年を表していますが、今回はあまり関係ありません。点は本来なら一点に集中するべきものですが、それだと状況がわからないので、>>>>em:ggplot2<<<の>>>>em:geom_jitter()<<<<で散らしました。

どのファセットにも>>>em:bub<<< = 0のところは>>>em:win<<<が1にも-1にも一様に分布していることがわかります。また、15日目以外はほぼ一様に分布していそうなことがわかりますが、千秋楽である15日目はたしかに右斜めの領域の分布が左斜めの領域の分布より濃くなっていますので、正の相関があると言えなくもなさそうです。

以上の結果から、バブル上の力士は千秋楽に勝ちやすいということは若干は言えるとかもしれません。つまり、1999年1月場所から、2010年9月場所までの71場所の幕内力士だけを見る限り、バブル上の力士が異常に高い勝率になるということは言えないが、千秋楽ではもしかすると勝ちやすいかもしれない、という消極的な主張になります。

そもそも、データを大局的に見てみますと、幕内力士がバブル上にある対戦は12年間71場所中>>>>em:2983<<<<回で、一場所あたり>>>>em:42.01<<<<回になります。

>>>shell
> nrow(subset(df1, df1$bub==1))
[1] 2983
> nrow(subset(df1, df1$bub==1))/(12*6 - 1)
[1] 42.01408
<<<

この対戦のうち片方のみのバブルの力士が勝利したのが、>>>>em:1529<<<<回、一場所あたり、>>>>em:21.5<<<<回です。

shell
> nrow(subset(df1, df1$win==1 & df1$bub==1))
[1] 1529
> nrow(subset(df1, df1$win==1 & df1$bub==1))/(12*6 - 1)
[1] 21.53521
<<<

幕内力士および幕内で対戦した十両力士の12年間71場所において、バブル上の力士が勝利する平均勝率は>>>>em:0.51<<<<というように、実はバブル上の力士の勝率はランダムで対戦したときの勝率と同じ程度しかないのです。

>>>shell
> nrow(subset(df1, df1$win==1 & df1$bub==1))/nrow(subset(df1, df1$bub==1))
[1] 0.5125712
<<<

この結果みるとお分かりのようにDuggan & Levitt 2002のデータおよびその解析より一層消極的な主張しか言えません。Duggan&Levitt2002が成立している一番の根拠は、バブル上にある力士の勝率が高く、それが統計的に有意であるということろにあります。今回はその一番の根拠を積極的に確かめることができませんでした。

ただし、今回の計算においては、完全な十両力士の勝敗データを手に入れることができなかったので、それがバブル上の力士が勝ちやすいということがはっきりと示せなかった原因なもかもしれません。また2000年以降のマスコミによる八百長追求キャンペーンによって幕内力士内で八百長行為を防ぐ強いインセンティブが働いたのかもしれません。更には、私の計算が誤っていることも考えられます。もしも、この計算の追試や何らかの追加計算をされた方がいらっしゃったら、是非ともその結果を教えてくださることを熱望します。また、十両の勝敗データ、1999年以降の十両・幕内の勝敗データを持っていらっしゃる方がおりましたら、そのデータを提供くださればより一層踏み込んだことが分析できると思います。連絡はknife@bakfoo.comにメイルにてお願いできればと思います。

●まとめと次回について

このようにYahoo!スポーツにあるオープンデータを利用すれば、大相撲の八百長が起きやすいかどうかということを統計学的に調べることができます。結論は最近12年の幕内データを利用するだけでは、Duggan&Levitt2002が示したような八百長の根拠を積極的に見つけ出すことができませんでした。

次回もまた、オープンソースのRを利用して、オープンデータにアクセスし、オープンアイディアの活用をしたいと思います。次回は、Yahoo!スポーツの大相撲データを自動採取して、Google Refineで自動整形させるというスクリプトを同実装するか、ということを示すことが出来ればと思います。それでは、また会いましょう。
